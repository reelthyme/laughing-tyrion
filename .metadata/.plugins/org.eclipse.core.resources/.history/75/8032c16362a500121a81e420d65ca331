package main;

import org.newdawn.slick.Color;
import org.newdawn.slick.ShapeFill;
import org.newdawn.slick.geom.Circle;
import org.newdawn.slick.geom.Polygon;
import org.newdawn.slick.geom.Rectangle;
import org.newdawn.slick.geom.Shape;
import org.newdawn.slick.geom.ShapeRenderer;
import org.newdawn.slick.geom.Vector2f;

public class Collidable {
	private double x, y;
	final String boxType; // type of shape the object uses for collision
							// detection

	// uncomment these as we implment them.
	// double hp;
	// boolean isInvincible; //true for non-destructible tiles, and false for
	// basically everything else.
	// boolean isFixed; //false for players and practically all bullets
	// (excepting lasers), true for tiles and fixed terrain.
	// boolean isKnockbackable=true; //true for players, false for most bullets
	// double mass; //for the lovely physics engine in determining knockback
	// only required if unit isKnockbackable. If two unKnockbackable objects
	// collide, they freeze (maybe marginal forward movement)
	// and keep colliding every frame, until they one or both of them dissipates
	// (think 2 heavy energy waves)and terrain.
	// boolean collidesWithNormalCollidables = true;

	Polygon tri;
	Rectangle rect;
	Circle cir;
	Shape hitBox;

	public Collidable(Circle c) { //all the constructors are meant to make new copies of the given shape
		cir = new Circle(c.radius, c.getCenterX(), c.getCenterY());
		boxType = "c";
	}

	public Collidable(Rectangle r) {
		rect = new Rectangle(r.getMinX(), r.getMinY(), r.getWidth(), r.getHeight());
		boxType = "r";
	}

	public Collidable(Polygon t) {
		assert (t.getPointCount() == 3);
		tri = t;
		boxType = "t";
	}

	class RedFill implements ShapeFill {

		@Override
		public Color colorAt(Shape shape, float x, float y) {
			// TODO Auto-generated method stub
			return Color.red;
		}

		@Override
		public Vector2f getOffsetAt(Shape shape, float x, float y) {
			return new Vector2f(0,0);
		}

	};
	class WhiteFill extends RedFill {

		@Override
		public Color colorAt(Shape shape, float x, float y) {
			// TODO Auto-generated method stub
			return Color.white;
		}


	};
	boolean colliding = false;

	public Shape getCollisionShape() {
		if (boxType == "c") {
			return cir;
		}
		if (boxType == "r") {
			return rect;
		}
		if (boxType == "t") {
			return tri;
		}
		assert (false);
		return null;
	}

	public void render() { // can be overridden by subclasses, such as units
		if (colliding == true) {

			ShapeRenderer.draw(getCollisionShape(), new RedFill());

		} else {
			ShapeRenderer.draw(getCollisionShape(), new WhiteFill());
		}
	}
	public void setX(double x){
		this.x=x;
		this.getCollisionShape().setCenterX((float) x);
	}
	public void setY(double y){
		this.y=y;
		this.getCollisionShape().setCenterY((float) y);
	}
}
